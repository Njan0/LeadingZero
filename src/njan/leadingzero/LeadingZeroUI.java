/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package njan.leadingzero;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jan
 */
public class LeadingZeroUI extends javax.swing.JFrame {
    String selectFolderTitle = "Select Folder";
    String currentPath = "";
    String[] currentFiles;
    String[] currentOuts;
    NameChangeModel.State[] currentStates;

    /**
     * Creates new form LeadingZeroUI
     */
    public LeadingZeroUI() {
        initComponents();
        jTableFiles.setDefaultRenderer(String.class, new NameChangeModel.CustomRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldPath = new javax.swing.JTextField();
        jButtonOpen = new javax.swing.JButton();
        jButtonApply = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFiles = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LeadingZero");

        jTextFieldPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPathActionPerformed(evt);
            }
        });

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonApply.setText("Apply");
        jButtonApply.setEnabled(false);
        jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyActionPerformed(evt);
            }
        });

        jTableFiles.setAutoCreateRowSorter(true);
        jTableFiles.setModel(new NameChangeModel());
        jTableFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableFiles.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableFilesFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFiles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextFieldPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOpen))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonApply)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonApply)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        JFileChooser chooser = new JFileChooser(currentPath); 
        chooser.setDialogTitle(selectFolderTitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);  
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            jTextFieldPath.setText(chooser.getSelectedFile().toString());
            updateFiles();
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jTextFieldPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPathActionPerformed
        updateFiles();
    }//GEN-LAST:event_jTextFieldPathActionPerformed

    private void jTableFilesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableFilesFocusLost
        jTableFiles.clearSelection();
    }//GEN-LAST:event_jTableFilesFocusLost

    private void jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyActionPerformed
        for (int i = 0; i < currentFiles.length; ++i) {
            if (currentStates[i] == NameChangeModel.State.enabled) {
                Path source = Paths.get(currentPath, currentFiles[i]);
                try {
                    Files.move(source, source.resolveSibling(currentOuts[i]));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Can not move file: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                }
            }
        }
        updateFiles();
    }//GEN-LAST:event_jButtonApplyActionPerformed

    void updateFiles() {
        String path = jTextFieldPath.getText();
        final File folder = new File(path);
        if (!folder.exists() || !folder.isDirectory()) {
            JOptionPane.showMessageDialog(null, "Invalid path: " + path, "Error", JOptionPane.ERROR_MESSAGE);
            jTextFieldPath.setText(currentPath);
            return;
        }
        
        currentPath = path;
        
        // Get all files
        File[] files = folder.listFiles();
        currentFiles = new String[files.length];
        for (int i = 0; i < files.length; ++i) {
            currentFiles[i] = files[i].getName();
        }
        
        
        currentOuts = LeadingZeroGenerator.Generate(currentFiles);
        currentStates = new NameChangeModel.State[files.length];
        
        String[][] data = new String[files.length][2];
        for (int i = 0; i < files.length; ++i) {
            data[i][0] = currentFiles[i];
            data[i][1] = currentOuts[i];
            
            if (currentStates[i] == null) {
                currentStates[i] = currentOuts[i].equals(currentFiles[i]) ? 
                        NameChangeModel.State.noChange :
                        NameChangeModel.State.enabled;
                
                // Check for collision with old filenames
                for (int j = 0; j < files.length; ++j) {
                    if (currentOuts[i].equals(currentFiles[j]) && i != j) {
                        currentStates[i] = NameChangeModel.State.collision;
                        break;
                    }
                }
                // Check for collision between new filenames
                for (int j = i+1; j < files.length; ++j) {
                    if (currentOuts[i].equals(currentOuts[j])) {
                        currentStates[i] = currentStates[j] = NameChangeModel.State.collision;
                        break;
                    }
                }
            }
        }
        jTableFiles.setModel(new NameChangeModel(data, currentStates));
        
        boolean applicable = Arrays.stream(currentStates).anyMatch(NameChangeModel.State.enabled::equals);
        jButtonApply.setEnabled(applicable);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeadingZeroUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeadingZeroUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeadingZeroUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeadingZeroUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeadingZeroUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApply;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFiles;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables
}
